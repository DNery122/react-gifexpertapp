{"version":3,"sources":["helpers/getGifs.js","components/GitGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","components/AddCategory.js","GifExpertApp.js","index.js"],"names":["getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GitGridItem","className","src","alt","GitGrid","useState","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","AddCategory","setCategories","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAAaA,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sD,OCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACrB,ECFwB,SAACA,GAEzB,MAA0BoB,mBAAS,CAC/Bb,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPzB,EAAQC,GACHyB,MAAM,SAAAC,GACHC,YAAW,WACPJ,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAEd,UAEZ,CAACrB,IAEGsB,EDjBwBM,CAAa5B,GAArCqB,EAAP,EAAOA,QAAcR,EAArB,EAAgBN,KAChB,OACI,qCACI,oBAAIS,UAAU,oCAAd,SAAmDhB,IACjDqB,GAAW,mBAAGL,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,a,OEXxBkB,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCV,mBAAS,IAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KASA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BP,GAAe,SAAAQ,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAba,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,aCD9CG,EAAgB,WACzB,MAAoCvB,mBAAS,CAAC,cAA9C,mBAAOwB,EAAP,KAAmBd,EAAnB,KACA,OACI,qCACA,+CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAEQc,EAAWnC,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCR7B6C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a0651569.chunk.js","sourcesContent":["export const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=bCnoiwHOBCl91NsyZIyLbQ4X05Sn4fjh`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GitGridItem = ( {title, url} ) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GitGridItem } from './GitGridItem';\r\n\r\nexport const GitGrid = ({category}) => {\r\n    const {loading, data:images} = useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n            { loading && <p className='animate__animated animate__flash'>Loading</p> }\r\n            <div className='card-grid'>  \r\n                {\r\n                    images.map( img =>(\r\n                        <GitGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                }, 500);\r\n            } )\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputValue = (e) => setinputValue(e.target.value);\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue,...cats] );\r\n            setinputValue('');\r\n        }\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputValue}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React, { useState } from 'react';\r\nimport { GitGrid } from './components/GitGrid';\r\nimport { AddCategory } from './components/AddCategory';\r\n\r\nexport const GiftExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One punch']);\r\n    return(\r\n        <>\r\n        <h2>GiftExpertApp</h2>\r\n        <AddCategory setCategories = {setCategories} />\r\n        <hr/>\r\n        <ol>\r\n            {\r\n                categories.map( category => (\r\n                    <GitGrid \r\n                        key={category}\r\n                        category={category}\r\n                    />\r\n                    ))\r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GiftExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GiftExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}